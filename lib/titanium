#!/usr/bin/env node

/**
 * Dependencies
 */
var colors = require('colors'),
    program = require('commander'),
    path = require('path'),
    async = require('async'),
    pkginfo = require('pkginfo')(module),
	support = require('./support'),
	commands = require('./commands'),
	constants = require('./support/constants'),
	validate = require('./support/validate'),
	config = require('./support/config');

console.log('*********************************************************'.red);
console.log('********** EXPERIMENTAL AND UNDER CONSTRUCTION **********'.red);
console.log('*********************************************************'.red);

function commandHelp(_command) {	
	//help for specific command
	if (_command) {
		var cmd = commands[_command];
		support.printDoc(cmd.doc);
		console.log('');
	}
	else {
		console.log('\n*********************************'.magenta);
		console.log(('* Titanium Mobile CLI (v' + module.exports.version + ') *').magenta);
		console.log('*********************************\n'.magenta);
		console.log('Run "titanium help [command]" for usage information...\n');
		support.printAligned('help', 'Print this command listing');
		for (var command in commands) {
			support.printAligned(command, commands[command].doc.description);
		}
		console.log('');
	}
}

//process input
var sdkRoot = config.getSdkRoot();
var configFile = path.join(sdkRoot, constants.TITANIUM_CONFIG_FILE);
var configFileExists = path.existsSync(configFile);
var cmd = process.argv[2];

if (process.argv.length < 3) { 
	if (!configFileExists) {
		commands['configure'].execute([],{},new support.Logger(false));
	} else {
		commandHelp();
	}
} else if (cmd === 'help') {
	commandHelp(process.argv[3]);
} else {
	var command = commands[cmd],
		logger;

	// Validate the command
	if (!command) {
		// TODO: check levenshtein distance from known commands (Issue #029)
		support.die('Invalid command "' + cmd + '"');
	}

	// Parse command line options
	command.doc.options.forEach(function(opt) {
		program.option(opt[0], opt[1], opt[2], opt[3]);
	});
	program.option('-q, --quiet', 'No logging output, with the exception of errors');
	program.option('-v, --verbose', 'Verbose logging output');
	program.parse(process.argv);
	program.args.shift();
	logger = new support.Logger(program.verbose || false, program.quiet || false);
	
	async.series([
		// Run configure if it is necessary
		function(callback) {
			if (command.needsConfig && !configFileExists) {
				logger.warn('Titanium has not yet been configured. Configuring now...');
				commands['configure'].execute([],{},new support.Logger(false), function(err) {
					callback(err);
				});
			} else {
				callback();
			}
		},
		// Parse and execute command
		function(callback) {
			logger.debug('Running command "' + cmd + '"...');
			command.execute(program.args, program, logger);
			callback();
		}
	],
	function(err, result) {
		if (err) { support.die(err); }
	});
	
}
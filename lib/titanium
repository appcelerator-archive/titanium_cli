#!/usr/bin/env node

/**
 * Dependencies
 */
var colors = require('colors'),
    program = require('commander'),
	support = require('./support'),
	commands = require('./commands');

function commandHelp(_command) {	
	//help for specific command
	if (_command) {
		var cmd = commands[_command];
		support.printDoc(cmd.doc);
		console.log('');
	}
	else {
		console.log('\n********************************'.magenta);
		console.log('* Titanium Mobile CLI (v0.0.2) *'.magenta);
		console.log('********************************\n'.magenta);
		console.log('Run "titanium help [command]" for usage information...\n');
		support.printAligned('help', 'Print this command listing');
		for (var command in commands) {
			support.printAligned(command, commands[command].doc.description);
		}
		console.log('');
	}
}

//process input
if (process.argv.length < 3 || process.argv[2] === 'help') {
	commandHelp(process.argv[3]);
}
else {
	var command = process.argv[2],
		args = [],
		verbose = false; //look for this one to initialize logger
		
	if (command !== 'run') {
		var opts = commands[command].getOptions();
		for (var i = 0, len = opts.length; i < len; i++) {
			program.option(opts[i][0], opts[i][1], opts[i][2], opts[i][3]);
		}
		program.parse(process.argv);
		program.args.shift();
		verbose = program.verbose;
		
		var logger = new support.Logger(verbose);
		logger.debug('attempting to run command: '+command);
		logger.debug('args are:\n'+support.printObject(args));
		commands[command].execute(program.args,program,logger);
	} else {	
		for (var i = 3, l = process.argv.length; i < l; ) {
			var tkn = process.argv[i];
			if (tkn.indexOf('-') === 0) {
				var opt = tkn.replace(/\-/g,'');
				if (opt === 'v' || opt === 'verbose') {
					verbose = true;
				}
				//can be either a value or just a flag
				//should support "titanium run --verbose" or "titanium run -p iphone"
				if (process.argv[i+1] && process.argv[i+1].indexOf('-') === -1) {
					var arg = {};
					arg[opt] = process.argv[i+1];
					args.push(arg);
					i+=2;
				}
				else {
					args.push(opt);
					i++;
				}
			}
			else {
				//indicates a "sub command", like titanium run iphone or similar
				args.push(tkn);
				i++;
			}
		}
		
		var logger = new support.Logger(verbose);
		logger.debug('attempting to run command: '+command);
		//logger.debug('config is:\n'+support.printObject(config));
		logger.debug('args are:\n'+support.printObject(args));

		commands[command].execute(args,logger);
	}
}
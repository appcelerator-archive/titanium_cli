#!/usr/bin/env node

/**
 * Dependencies
 */
var colors = require('colors'),
    program = require('commander'),
	support = require('./support'),
	commands = require('./commands'),
	constants = require('./support/constants');

// program
// 	.version(constants.TITANIUM_CLI_VERSION)
// 	.description('* Titanium Mobile CLI (v' + constants.TITANIUM_CLI_VERSION + ') *')
// 	.usage('COMMAND [OPTIONS]')
// 	.option('-v, --verbose', 'Verbose logging output');
// 	// .on('--help', function() {
// 	// 	console.log('do help');
// 	// });

// program
// 	.command('clean')
// 	.usage('\r  Usage: titanium clean [OPTIONS]')
// 	.description('clean shit up')
// 	.option('-f, --fun <fun>', 'a fun option')
// 	.action(function(e){
// 		console.log('cleaning up');
// 	});

// program
// 	.command('run')
// 	.usage('titanium run [TARGETS] [OPTIONS]')
// 	.description('run a titanium app')
// 	.option('-x, --xerox <xerox>', 'i dont know why i typed xerox')
// 	.option('-y, --yelp', 'the yelp option')
// 	.action(function(e){
// 		console.log('cleaning up');
// 	});

// program.parse(process.argv);
// process.exit();

function commandHelp(_command) {	
	//help for specific command
	if (_command) {
		var cmd = commands[_command];
		support.printDoc(cmd.doc);
		console.log('');
	}
	else {
		console.log('\n********************************'.magenta);
		console.log(('* Titanium Mobile CLI (v' + constants.TITANIUM_CLI_VERSION+ ') *').magenta);
		console.log('********************************\n'.magenta);
		console.log('Run "titanium help [command]" for usage information...\n');
		support.printAligned('help', 'Print this command listing');
		for (var command in commands) {
			support.printAligned(command, commands[command].doc.description);
		}
		console.log('');
	}
}

//process input
if (process.argv.length < 3 || process.argv[2] === 'help') {
	commandHelp(process.argv[3]);
}
else {
	var command = process.argv[2],
		opts = commands[command].getOptions();

	// Parse command-specific arguments
	opts.forEach(function(opt) {
		program.option(opt[0], opt[1], opt[2], opt[3]);
	});
	program.parse(process.argv);
	program.args.shift();

	// Launch the command
	commands[command].execute(
		program.args, 
		program,      
		new support.Logger(program.verbose || false)
	);
}